#!/usr/bin/env node

const http = require('http');
const PORT = process.env.PORT || 7000
let app = require('../app');

// catch 404 and render a not-found.hbs template
app.use((req, res, next) => {
    res.status(404);
    res.render('not-found');
});

app.use((err, req, res, next) => {
    // always log the error
    console.error('ERROR', req.method, req.path, err);

    // only render if the error ocurred before sending the response
    if (!res.headersSent) {
        res.status(500);
        res.render('error');
    }
});

let server = http.createServer(app);

server.on('error', error => {
    if (error.syscall !== 'listen') { throw error }

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(`Port ${PORT} requires elevated privileges`);
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(`Port ${PORT} is already in use`);
            process.exit(1);
            break;
        default:
            throw error;
    }
});


  var io = io.listen(server);
server.listen(PORT || 7000, () => {
    console.log(`Listening on http://localhost:${PORT}`);
});